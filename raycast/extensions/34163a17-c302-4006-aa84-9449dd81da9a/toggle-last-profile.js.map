{
  "version": 3,
  "sources": ["../src/toggle-last-profile.ts", "../src/utils.ts", "../node_modules/run-applescript/index.js"],
  "sourcesContent": ["import { closeMainWindow, showToast, Toast } from \"@raycast/api\";\nimport { connect, disconnect, getStatus, isRunning, startOpenVPN } from \"./utils\";\n\nexport default async function Command() {\n  await closeMainWindow();\n\n  const isAppRunning = await isRunning();\n\n  if (!isAppRunning) {\n    startOpenVPN();\n  }\n\n  const status = await getStatus();\n\n  let error;\n\n  if (status.isConnected) {\n    error = await disconnect();\n  } else {\n    error = await connect(status.selectedProfileName);\n  }\n\n  if (error) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: error,\n    });\n\n    return;\n  }\n\n  await showToast({\n    style: status.isConnected ? Toast.Style.Failure : Toast.Style.Success,\n    title: `${status.selectedProfileName} ${status.isConnected ? \"DISCONNECTED\" : \"CONNECTED\"}`,\n  });\n}\n", "import { exec, execSync } from \"child_process\";\nimport { runAppleScript } from \"run-applescript\";\nimport { promisify } from \"util\";\n\nconst execAsync = promisify(exec);\n\nexport const isRunning = async () => {\n  try {\n    const result = await runAppleScript(`\n      try\n        tell application \"System Events\"\n          tell process \"OpenVPN Connect\"\n            -- Check if the menu bar item 1 of menu bar 2 exists\n            if exists menu bar item 1 of menu bar 2 then\n              return true\n            else\n              return false\n            end if\n          end tell\n        end tell\n      on error\n        return false\n      end try\n    `);\n\n    return result === \"true\";\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const startOpenVPN = async () => {\n  try {\n    // Start the app\n    execSync('\"/Applications/OpenVPN Connect/OpenVPN Connect.app/contents/MacOS/OpenVPN Connect\"');\n    // Minimize it right away (running this command without the app running might fail)\n    execSync('\"/Applications/OpenVPN Connect/OpenVPN Connect.app/contents/MacOS/OpenVPN Connect\" --minimize');\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const listProfiles = async (): Promise<\n  {\n    host: string;\n    id: string;\n    name: string;\n    type: string;\n    username: string;\n    \"server-override\": string;\n  }[]\n> => {\n  try {\n    const { stdout } = await execAsync(\n      '\"/Applications/OpenVPN Connect/OpenVPN Connect.app/contents/MacOS/OpenVPN Connect\" --list-profiles',\n    );\n\n    return JSON.parse(stdout);\n  } catch (e) {\n    return [];\n  }\n};\n\nexport const getStatus = async () => {\n  const menuBarItems = await runAppleScript(`\n    tell application \"System Events\" to tell process \"OpenVPN Connect\"\n      set menuBarItems to name of every menu item of menu 1 of menu bar item 1 of menu bar 2\n      return menuBarItems\n    end tell\n`);\n\n  const items = menuBarItems.split(\", \");\n\n  const isConnected = items.includes(\"Disconnect\");\n\n  const selectedProfileIndex = items.indexOf(isConnected ? \"Disconnect\" : \"Connect\") - 1;\n  const selectedProfileName = items[selectedProfileIndex];\n\n  return {\n    isConnected,\n    selectedProfileName,\n  };\n};\n\nexport const disconnect = async () => {\n  const isAppRunning = await isRunning();\n\n  if (!isAppRunning) return;\n\n  const error = await runAppleScript(`\n    try\n      tell application \"System Events\" to tell process \"OpenVPN Connect\"\n        click menu item \"Disconnect\" of menu 1 of menu bar item 1 of menu bar 2\n        return \"\"\n      end tell\n    on error\n\t\t  return \"Already disconnected\"\n\t  end try\n  `);\n\n  return error;\n};\n\nexport const connect = async (profileName: string) => {\n  const isAppRunning = await isRunning();\n\n  if (!isAppRunning) {\n    startOpenVPN();\n  }\n\n  const status = await getStatus();\n\n  const error = await runAppleScript(`\n    try\n      tell application \"System Events\" to tell process \"OpenVPN Connect\"\n        click menu item \"${profileName}\" of menu \"${status.selectedProfileName}\" of menu item \"${status.selectedProfileName}\" of menu 1 of menu bar item 1 of menu bar 2\n        return \"\"\n      end tell\n    on error\n\t\t  return \"Failed to connect\"\n\t  end try\n  `);\n\n  return error;\n};\n", "import process from 'node:process';\nimport {promisify} from 'node:util';\nimport {execFile, execFileSync} from 'node:child_process';\n\nconst execFileAsync = promisify(execFile);\n\nexport async function runAppleScript(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst {stdout} = await execFileAsync('osascript', ['-e', script, outputArguments]);\n\treturn stdout.trim();\n}\n\nexport function runAppleScriptSync(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst stdout = execFileSync('osascript', ['-e', script, ...outputArguments], {\n\t\tencoding: 'utf8',\n\t\tstdio: ['ignore', 'pipe', 'ignore'],\n\t\ttimeout: 500,\n\t});\n\n\treturn stdout.trim();\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAkD,wBCAlD,IAAAC,EAA+B,yBCA/B,IAAAC,EAAoB,6BACpBC,EAAwB,qBACxBC,EAAqC,8BAE/BC,KAAgB,aAAU,UAAQ,EAExC,eAAsBC,EAAeC,EAAQ,CAAC,oBAAAC,EAAsB,EAAI,EAAI,CAAC,EAAG,CAC/E,GAAI,EAAAC,QAAQ,WAAa,SACxB,MAAM,IAAI,MAAM,YAAY,EAG7B,IAAMC,EAAkBF,EAAsB,CAAC,EAAI,CAAC,KAAK,EAEnD,CAAC,OAAAG,CAAM,EAAI,MAAMN,EAAc,YAAa,CAAC,KAAME,EAAQG,CAAe,CAAC,EACjF,OAAOC,EAAO,KAAK,CACpB,CDbA,IAAAC,EAA0B,gBAEpBC,KAAY,aAAU,MAAI,EAEnBC,EAAY,SAAY,CACnC,GAAI,CAkBF,OAjBe,MAAMC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAenC,IAEiB,MACpB,MAAY,CACV,MAAO,EACT,CACF,EAEaC,EAAe,SAAY,CACtC,GAAI,IAEF,YAAS,oFAAoF,KAE7F,YAAS,+FAA+F,CAC1G,OAAS,EAAG,CACV,QAAQ,MAAM,CAAC,CACjB,CACF,EAuBO,IAAMC,EAAY,SAAY,CAQnC,IAAMC,GAPe,MAAMC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA,CAK3C,GAE4B,MAAM,IAAI,EAE/BC,EAAcF,EAAM,SAAS,YAAY,EAEzCG,EAAuBH,EAAM,QAAQE,EAAc,aAAe,SAAS,EAAI,EAC/EE,EAAsBJ,EAAMG,CAAoB,EAEtD,MAAO,CACL,YAAAD,EACA,oBAAAE,CACF,CACF,EAEaC,EAAa,SACH,MAAMC,EAAU,EAIvB,MAAML,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASlC,EAXkB,OAgBRM,EAAU,MAAOC,GAAwB,CAC/B,MAAMF,EAAU,GAGnCG,EAAa,EAGf,IAAMC,EAAS,MAAMX,EAAU,EAa/B,OAXc,MAAME,EAAe;AAAA;AAAA;AAAA,2BAGVO,CAAW,cAAcE,EAAO,mBAAmB,mBAAmBA,EAAO,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAMxH,CAGH,EDzHA,eAAOC,GAAiC,CACtC,QAAM,mBAAgB,EAED,MAAMC,EAAU,GAGnCC,EAAa,EAGf,IAAMC,EAAS,MAAMC,EAAU,EAE3BC,EAQJ,GANIF,EAAO,YACTE,EAAQ,MAAMC,EAAW,EAEzBD,EAAQ,MAAME,EAAQJ,EAAO,mBAAmB,EAG9CE,EAAO,CACT,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAOA,CACT,CAAC,EAED,MACF,CAEA,QAAM,aAAU,CACd,MAAOF,EAAO,YAAc,QAAM,MAAM,QAAU,QAAM,MAAM,QAC9D,MAAO,GAAGA,EAAO,mBAAmB,IAAIA,EAAO,YAAc,eAAiB,WAAW,EAC3F,CAAC,CACH",
  "names": ["toggle_last_profile_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_node_process", "import_node_util", "import_node_child_process", "execFileAsync", "runAppleScript", "script", "humanReadableOutput", "process", "outputArguments", "stdout", "import_util", "execAsync", "isRunning", "runAppleScript", "startOpenVPN", "getStatus", "items", "runAppleScript", "isConnected", "selectedProfileIndex", "selectedProfileName", "disconnect", "isRunning", "connect", "profileName", "startOpenVPN", "status", "Command", "isRunning", "startOpenVPN", "status", "getStatus", "error", "disconnect", "connect"]
}
